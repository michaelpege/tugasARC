{"version":3,"sources":["components/TodoItems.js","components/Todos.js","components/layout/Header.js","components/AddTodos.js","components/pages/about.js","App.js","serviceWorker.js","index.js"],"names":["TodoItems","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","this","id","title","style","type","onChange","markComplete","bind","onClick","delete","btnStyle","Component","protoTypes","PropTypes","object","isRequired","color","border","borderRadius","cursor","float","Todos","todos","map","key","React","array","Header","headerStyle","textAlign","AddTodos","state","e","setState","target","value","onSubmit","preventDefault","display","name","placeholder","flex","className","about","Fragment","App","uuid","v4","filter","newTodo","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c30d7c05.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItems extends Component {\r\n    getStyle = () =>{\r\n        return{\r\n            background : '#f4f4f4',\r\n            padding : '10px',\r\n            borderBottom : '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        const { id, title } = this.props.todo;\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p>\r\n                    <input type=\"checkbox\" onChange={this.props.markComplete.bind(this, id)}></input>{'  '}\r\n                    { title }\r\n                    <button onClick={this.props.delete.bind(this,id)} style={btnStyle}>X</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nTodoItems.protoTypes = {\r\n    todo : PropTypes.object.isRequired\r\n}\r\n\r\nconst btnStyle={\r\n    background:'#ff0000',\r\n    color:'#fff',\r\n    border:'none',\r\n    padding:'5px 9px',\r\n    borderRadius:'50%',\r\n    cursor:'pointer',\r\n    float:'right'\r\n}\r\n\r\nexport default TodoItems\r\n","import React from 'react';\r\nimport TodoItems from './TodoItems';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass Todos extends React.Component {\r\n  render(){\r\n    return this.props.todos.map((todo) => (\r\n        <TodoItems key={todo.id} todo={todo} markComplete={this.props.markComplete} delete={this.props.delete}/>\r\n    ))\r\n  }\r\n}\r\n\r\nTodos.protoTypes = {\r\n    todos : PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos;\r\n","import React from 'react'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <header style={headerStyle}>\r\n            <h1>TodoList</h1>\r\n        </header>\r\n    )\r\n}\r\n\r\nconst headerStyle={\r\n    background:'#333333',\r\n    color:'#fff',\r\n    textAlign:'center',\r\n    padding:'10px'\r\n}","import React, { Component } from 'react'\r\n\r\nexport class AddTodos extends Component {\r\n    state={\r\n        title : ''\r\n    }\r\n\r\n    onChange = (e) =>{\r\n        this.setState({ title:e.target.value})\r\n    }\r\n\r\n    onSubmit = (e) =>{\r\n        e.preventDefault();\r\n        this.props.AddTodos(this.state.title);\r\n        this.setState({title:''});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <form onSubmit = {this.onSubmit} style = {{display : 'flex'}}>\r\n                <input type=\"text\" name=\"title\" placeholder=\"add todo...\" style={{flex : '10', padding : '5px'}}\r\n                    value = {this.state.title}\r\n                    onChange={this.onChange}\r\n                />\r\n                <input type=\"submit\" value=\"submit\" className=\"btn\" style={{ flex : '1'}}/>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodos\r\n","import React from 'react'\r\n\r\nfunction about() {\r\n    return (\r\n        <React.Fragment>\r\n            <h1>About</h1>\r\n            <p>This is a todo list app</p>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default about;","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Todos from './components/Todos';\nimport Header from './components/layout/Header';\nimport AddTodos from './components/AddTodos';\nimport about from './components/pages/about';\nimport './App.css';\nimport uuid from 'uuid';\n\nclass App extends React.Component {\n  state ={\n    todos:[\n      {\n        id : uuid.v4(),\n        title : 'Take out the trash',\n        completed : false\n      },\n      {\n        id : uuid.v4(),\n        title : 'Dinner',\n        completed : false\n      },\n      {\n        id : uuid.v4(),\n        title : 'Meeting with boss',\n        completed : false\n      }\n    ]\n  }\n\n  markComplete = (id) =>{\n    this.setState({todos: this.state.todos.map(todo => {\n      if(todo.id===id){\n        todo.completed = !todo.completed\n      }\n      return todo;\n    })});\n  }\n\n  delete = (id) =>{\n    this.setState({todos:[...this.state.todos.filter(todo => todo.id !== id)]})\n  }\n\n  AddTodos = (title) =>{\n    const newTodo = {\n      id: uuid.v4(),\n      title,\n      completed: false\n    }\n    this.setState({todos: [...this.state.todos, newTodo]});\n  }\n\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" render={props=>(\n              <React.Fragment>\n                  <AddTodos AddTodos={this.AddTodos} />\n                  <Todos todos={this.state.todos} markComplete={this.markComplete} delete={this.delete} />\n              </React.Fragment>\n            )}>\n            </Route>\n            <Route path = \"/about\" Component={about}>\n            </Route>\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}